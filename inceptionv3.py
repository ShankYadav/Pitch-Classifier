# -*- coding: utf-8 -*-
"""InceptionV3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UpdKfQ-ZO2-vvCHxciiY-Ps04gJ_BUfI
"""

import warnings
warnings.filterwarnings("ignore")

import os
import shutil
import glob
'''
from google.colab import drive
drive.mount('/content/drive')'''

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import keras

from keras.preprocessing import image
from keras.layers import Dense,Flatten
from keras.models import Model
from keras.applications.inception_v3 import InceptionV3,preprocess_input
from keras.preprocessing.image import ImageDataGenerator, load_img, img_to_array

base_model = InceptionV3(input_shape = (256,256,3),include_top = False)

for layer in base_model.layers:
  layer.trainable = False

X = Flatten()(base_model.output)
X = Dense(units = 2, activation = 'sigmoid')(X)

model = Model(base_model.input, X)

model.compile(optimizer = 'adam', loss = keras.losses.binary_crossentropy, metrics = ['accuracy'])

model.summary()

train_datagen = ImageDataGenerator(
    rescale = 1./255.,
    featurewise_center = True,
    rotation_range = 0.4,
    width_shift_range = 0.3,
    horizontal_flip = True,
    preprocessing_function = preprocess_input,
    zoom_range = 0.4,
    shear_range = 0.4)

train_data = train_datagen.flow_from_directory(
    directory = "E:\\train_data",
    target_size = (256,256),
    batch_size = 3)

train_data.class_indices

t_img, label = train_data.next()

def plot_img(img_arr, label):
  for idx, img in enumerate(img_arr):
    if idx < 10:
      plt.figure(figsize = (5,5))
      plt.imshow(img)
      plt.title(img.shape)
      plt.axis = False
      plt.show()

plot_img(t_img, label)

from keras.callbacks import ModelCheckpoint,EarlyStopping 

mc = ModelCheckpoint(
    filepath = "E:\\best_model.h5",
    monitor = "accuracy",
    verbose = 1,
    save_best_only = True)

es = EarlyStopping(
    monitor = "accuracy",
    min_delta = 0.01,
    patience = 5,
    verbose = 1)

cb = [mc,es]

his = model.fit_generator(
    train_data,
    steps_per_epoch = 20,
    epochs = 50,
    callbacks = cb)
'''
from keras.models import load_model

model = load_model("E:\\best_model.h5")

h = his.history
h.keys()

plt.plot(h['loss'],'go--')
plt.plot(h['accuracy'],'go--',color = 'blue')

plt.title('Loss vs Accuracy')
plt.show()

from keras.applications.imagenet_utils import PREPROCESS_INPUT_DOC
path = "/content/drive/MyDrive/train_data/pitch_view/pic (9).jpg"
img = image.load_img(path, target_size = (256,256))

i = image.img_to_array(img)

i = preprocess_input(i)

input_arr = np.array([i])

pred = np.argmax(model.predict(input_arr))

if pred == 0:
  print('Non-Pitch View')
else:
  print('Pitch View')

plt.imshow(input_arr[0])
plt.title('Image')
plt.axis = False
plt.show()

def img_get_arr(img_path):
  path = img_path
  img = image.load_img(path, target_size = (256,256))
  img = image.img_to_array(img)
  img = preprocess_input(img)
  img = np.array([img])
  return img

import tensorflow as tf

def grad_heat(img_arr, model, last_conv_layer, pred_index = None):
  grad_model  = tf.keras.models.Model(
      [model.input],
      [model.get_layer(last_conv_layer).output,
      model.output])
  
  with tf.GradientTape() as tape:
    last_conv_layer, preds = grad_model(img_arr)
    if pred_index is None:
      pred_index = tf.argmax(preds[0])
    class_channel = preds[:, pred_index]

  grads = tape.gradient(class_channel, last_conv_layer)

  pooles_grads = tf.reduce_mean(grads,axis = (0,1,2))

  last_conv_layer = last_conv_layer[0]

  heatmap = last_conv_layer @ pooles_grads[..., tf.newaxis]
  heatmap = tf.squeeze(heatmap)
  heatmap = tf.maximum(heatmap,0)/tf.math.reduce_max(heatmap)

  return heatmap.numpy()

import matplotlib.cm as cm
from IPython.display import Image, display

def grad_heat_disp(img_path, heatmap, cam_path = 'cam.jpg', alpha = 0.4):
  img = img_to_array(load_img(img_path))
  heatmap = np.uint8(255*heatmap)
  jet = cm.get_cmap("jet")
  jet_colors = jet(np.arange(256))[:,:3]
  jet_heatmap = jet_colors[heatmap]
  jet_heatmap = keras.preprocessing.image.array_to_img(jet_heatmap)
  jet_heatmap = jet_heatmap.resize((img.shape[1],img.shape[0]))
  jet_heatmap = keras.preprocessing.image.img_to_array(jet_heatmap)

  superimposed_img = jet_heatmap * alpha + img
  superimposed_img = keras.preprocessing.image.array_to_img(superimposed_img)

  superimposed_img.save(cam_path)
  display(Image(cam_path))

def img_pred_vis(path,last_conv_layer = "conv2d_93",model = model):
  img_arr = img_get_arr(path)
  heatmap = grad_heat(img_arr, model, last_conv_layer)

  plt.title('Heat Map')
  plt.imshow(heatmap)
  plt.show()
  img = image.load_img(path, target_size = (256,256))

  i = image.img_to_array(img)

  i = preprocess_input(i)

  input_arr = np.array([i])
  pred = np.argmax(model.predict(input_arr))

  if pred == 0:
    print('Non-Pitch View')
  else:
    print("Pitch View")

  grad_heat_disp(path,heatmap)

  print('Original Image')

  a = plt.imread(path)
  plt.imshow(a, cmap = 'gray')
  plt.title('Original Image')
  plt.show()

path = "/content/drive/MyDrive/pic1583.jpg"
img_pred_vis(path)'''